import groovy.xml.MarkupBuilder
import org.flywaydb.core.Flyway
import org.h2.jdbcx.JdbcDataSource
import org.jooq.codegen.GenerationTool

apply plugin: 'java'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

buildscript {
    ext {
        jooqVersion = '3.12.1'
        h2Version = '1.4.199'
        flywayVersion = '5.2.4'
        slf4jVersion = '1.7.25'
        logbackVersion = '1.2.2'
        guavaVersion = '25.1-jre'
        guiceVersion = '4.2.2'
        sparkVersion = '2.8.0'
        jacksonVersion = '2.9.0'
        hikariVersion = '3.4.1'

        javaxAnnotationVersion = '1.3.2'

        junitVersion = '5.5.2'
        mockitoVersion = '2.28.2'
        assertjVersion = '3.13.2'
        retrofitVersion = '2.6.2'
        spotifyFuturesVersion = '0.3.1'
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath group: 'org.jooq', name: 'jooq-codegen', version: jooqVersion
        classpath group: 'com.h2database', name: 'h2', version: h2Version
        classpath group: 'org.flywaydb', name: 'flyway-core', version: flywayVersion
    }
}

dependencies {
    compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
    compile group: 'ch.qos.logback', name: 'logback-core', version: logbackVersion
    compile group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion

    compile group: 'com.google.guava', name: 'guava', version: guavaVersion
    compile group: 'com.google.inject', name: 'guice', version: guiceVersion

    compile group: 'com.sparkjava', name: 'spark-core', version: sparkVersion
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: jacksonVersion
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: jacksonVersion
    compile group: 'com.fasterxml.jackson.module', name: 'jackson-module-paranamer', version: jacksonVersion

    compile group: 'com.h2database', name: 'h2', version: h2Version
    compile group: 'com.zaxxer', name: 'HikariCP', version: hikariVersion
    compile group: 'org.jooq', name: 'jooq', version: jooqVersion
    compile group: 'org.flywaydb', name: 'flyway-core', version: flywayVersion

    compileOnly group: 'javax.annotation', name: 'javax.annotation-api', version: javaxAnnotationVersion

    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter', version: junitVersion
    testCompile group: 'org.mockito', name: 'mockito-core', version: mockitoVersion
    testCompile group: 'org.assertj', name: 'assertj-core', version: assertjVersion

    testCompile group: 'com.squareup.retrofit2', name: 'retrofit', version: retrofitVersion
    testCompile group: 'com.squareup.retrofit2', name: 'converter-jackson', version: retrofitVersion

    testCompile group: 'com.spotify', name: 'completable-futures', version: spotifyFuturesVersion
}

test {
    useJUnitPlatform()
}

task jooqCodegen {
    doLast {
        def dbUrl = 'jdbc:h2:mem:jooqCodegen'
        def dbUser = 'sa'
        def dbPw = ''

        def ds = new JdbcDataSource()
        ds.setUrl(dbUrl+";DB_CLOSE_DELAY=-1")
        ds.setUser(dbUser)
        ds.setPassword(dbPw)

        Flyway.configure()
                .dataSource(ds)
                .locations('filesystem:' + project.file("src/main/resources/db/migration"))
                .load()
                .migrate()

        delete 'src/main/java/revolut/backendtest/persistence/jooq/codegen'

        //see https://www.jooq.org/doc/3.12/manual/code-generation/codegen-gradle/
        def writer = new StringWriter()
        def xml = new MarkupBuilder(writer)
                .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.12.0.xsd') {
            jdbc() {
                driver('org.h2.Driver')
                url(dbUrl)
                user(dbUser)
                password(dbPw)
            }
            generator() {
                database() {
                    inputSchema("PUBLIC")
                    excludes("INFORMATION_SCHEMA.*|FLYWAY.*")
                }

                target() {
                    packageName('revolut.backendtest.persistence.jooq.codegen')
                    directory('src/main/java')
                }
            }
        }

        GenerationTool.generate(writer.toString())
    }
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Money Transfer Application',
                'Implementation-Version': "1.0",
                'Main-Class': 'revolut.backendtest.MoneyTransferApplication'
    }
    zip64 true
    baseName = 'money-transfer-app'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}