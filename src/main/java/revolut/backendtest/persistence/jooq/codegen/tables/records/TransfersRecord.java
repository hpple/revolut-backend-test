/*
 * This file is generated by jOOQ.
 */
package revolut.backendtest.persistence.jooq.codegen.tables.records;


import java.math.BigDecimal;
import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;

import revolut.backendtest.persistence.jooq.codegen.tables.Transfers;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TransfersRecord extends UpdatableRecordImpl<TransfersRecord> implements Record5<Long, Long, Long, Timestamp, BigDecimal> {

    private static final long serialVersionUID = 534233528;

    /**
     * Setter for <code>PUBLIC.TRANSFERS.TRANSFER_ID</code>.
     */
    public void setTransferId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>PUBLIC.TRANSFERS.TRANSFER_ID</code>.
     */
    public Long getTransferId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>PUBLIC.TRANSFERS.FROM_ACCOUNT_ID</code>.
     */
    public void setFromAccountId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>PUBLIC.TRANSFERS.FROM_ACCOUNT_ID</code>.
     */
    public Long getFromAccountId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>PUBLIC.TRANSFERS.TO_ACCOUNT_ID</code>.
     */
    public void setToAccountId(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>PUBLIC.TRANSFERS.TO_ACCOUNT_ID</code>.
     */
    public Long getToAccountId() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>PUBLIC.TRANSFERS.TRANSFERED_AT</code>.
     */
    public void setTransferedAt(Timestamp value) {
        set(3, value);
    }

    /**
     * Getter for <code>PUBLIC.TRANSFERS.TRANSFERED_AT</code>.
     */
    public Timestamp getTransferedAt() {
        return (Timestamp) get(3);
    }

    /**
     * Setter for <code>PUBLIC.TRANSFERS.AMOUNT</code>.
     */
    public void setAmount(BigDecimal value) {
        set(4, value);
    }

    /**
     * Getter for <code>PUBLIC.TRANSFERS.AMOUNT</code>.
     */
    public BigDecimal getAmount() {
        return (BigDecimal) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, Long, Timestamp, BigDecimal> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Long, Long, Long, Timestamp, BigDecimal> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Transfers.TRANSFERS.TRANSFER_ID;
    }

    @Override
    public Field<Long> field2() {
        return Transfers.TRANSFERS.FROM_ACCOUNT_ID;
    }

    @Override
    public Field<Long> field3() {
        return Transfers.TRANSFERS.TO_ACCOUNT_ID;
    }

    @Override
    public Field<Timestamp> field4() {
        return Transfers.TRANSFERS.TRANSFERED_AT;
    }

    @Override
    public Field<BigDecimal> field5() {
        return Transfers.TRANSFERS.AMOUNT;
    }

    @Override
    public Long component1() {
        return getTransferId();
    }

    @Override
    public Long component2() {
        return getFromAccountId();
    }

    @Override
    public Long component3() {
        return getToAccountId();
    }

    @Override
    public Timestamp component4() {
        return getTransferedAt();
    }

    @Override
    public BigDecimal component5() {
        return getAmount();
    }

    @Override
    public Long value1() {
        return getTransferId();
    }

    @Override
    public Long value2() {
        return getFromAccountId();
    }

    @Override
    public Long value3() {
        return getToAccountId();
    }

    @Override
    public Timestamp value4() {
        return getTransferedAt();
    }

    @Override
    public BigDecimal value5() {
        return getAmount();
    }

    @Override
    public TransfersRecord value1(Long value) {
        setTransferId(value);
        return this;
    }

    @Override
    public TransfersRecord value2(Long value) {
        setFromAccountId(value);
        return this;
    }

    @Override
    public TransfersRecord value3(Long value) {
        setToAccountId(value);
        return this;
    }

    @Override
    public TransfersRecord value4(Timestamp value) {
        setTransferedAt(value);
        return this;
    }

    @Override
    public TransfersRecord value5(BigDecimal value) {
        setAmount(value);
        return this;
    }

    @Override
    public TransfersRecord values(Long value1, Long value2, Long value3, Timestamp value4, BigDecimal value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TransfersRecord
     */
    public TransfersRecord() {
        super(Transfers.TRANSFERS);
    }

    /**
     * Create a detached, initialised TransfersRecord
     */
    public TransfersRecord(Long transferId, Long fromAccountId, Long toAccountId, Timestamp transferedAt, BigDecimal amount) {
        super(Transfers.TRANSFERS);

        set(0, transferId);
        set(1, fromAccountId);
        set(2, toAccountId);
        set(3, transferedAt);
        set(4, amount);
    }
}
